@model List<ALFINapp.Models.UsuarioAsesorDTO>

@{
    var AsesoraModificar = (ALFINapp.Models.UsuarioAsesorDTO)ViewData["AsesorAModificar"];
}

<div class="mt-3">
    <h4>Modificar Clientes Asignados</h4>
    <div class="mb-3">
        <label for="totalClientesAsignados" class="form-label">Total Clientes Asignados</label>
        <input type="number" class="form-control" id="totalClientesAsignados"
            value="@AsesoraModificar.TotalClientesAsignados" readonly>
    </div>

    @foreach (var AsesorAsignado in Model)
    {
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="totalClientesAsignados" class="form-label"> @AsesorAsignado.NombresCompletos - Total Clientes Disponibles: </label>
                    <input type="number" class="form-control" id="totalClientesAsignados_@AsesorAsignado.IdUsuario"
                        value="@AsesorAsignado.ClientesSinTrabajar" readonly>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="totalClientesAsignados" class="form-label"> Modifique el Numero Disponibles Clientes</label>
                    <input type="number" class="form-control" id="ModificarClientes_@AsesorAsignado.IdUsuario">
                </div>
            </div>
        </div>
    }
</div>
<button class="btn btn-success" onclick="guardarCambiosAsignaciones()">Guardar Cambios</button>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Obtener todos los inputs de modificación
        const modificarInputs = document.querySelectorAll("input[id^='ModificarClientes_']");

        modificarInputs.forEach(input => {
            input.addEventListener("input", function () {
                const idUsuario = this.id.split('_')[1]; // Obtener el IdUsuario desde el ID del input
                const totalClientesInput = document.getElementById(`totalClientesAsignados_${idUsuario}`);
                
                // Validar y calcular el nuevo valor
                const modificarValor = parseInt(this.value) || 0; // Valor ingresado o 0 si está vacío
                const totalClientesInicial = parseInt(totalClientesInput.getAttribute("value")) || 0; // Leer valor inicial

                // Actualizar el valor mostrado
                const nuevoTotal = totalClientesInicial - modificarValor;
                totalClientesInput.value = nuevoTotal >= 0 ? nuevoTotal : 0; // Evitar valores negativos
            });
        });
    });

    function guardarCambiosAsignaciones() {
        const asignaciones = [];

        // Recopilar datos modificados
        const modificarInputs = document.querySelectorAll("input[id^='ModificarClientes_']");
        modificarInputs.forEach(input => {
            const idUsuario = input.id.split('_')[1]; // Obtener el IdUsuario
            const valorModificado = parseInt(input.value) || 0;

            if (valorModificado > 0) { // Solo enviar cambios relevantes
                asignaciones.push({ idUsuario, valorModificado });
            }
        });

        // Llamada AJAX para guardar los cambios
        fetch('/TuControlador/GuardarCambiosAsignaciones', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '@Html.AntiForgeryToken()' // Token antifalsificación si es necesario
            },
            body: JSON.stringify(asignaciones)
        })
        .then(response => {
            if (response.ok) {
                alert("Cambios guardados con éxito.");
                location.reload(); // Opcional: recargar la página
            } else {
                alert("Error al guardar los cambios.");
            }
        })
        .catch(error => console.error("Error en la llamada AJAX:", error));
    }
</script>
