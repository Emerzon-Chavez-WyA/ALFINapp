@model List<VendedorConClientesDTO>

@{
    var destinoBases = ViewData["DestinoBases"] as List<string>;
    var NumLeads = ViewData["NumLeads"] as List<int>;
}

@section Styles {
    <link rel="stylesheet" href="~/css/main_page.css">
}

<div class="container mt-4">
    <div class="container mb-3">
        <h3>Seccion Asignaciones del Asesor de Creditos</h3>
        <div class="form-group mb-3">
            <div class="row">
                @if (NumLeads != null && NumLeads.Count > 0)
                {
                    <div class="col-md-4">
                        <label for="NumTotalLeads">Numero Total de Leads</label>
                        <input type="text" class="form-control" id="NumTotalLeads" name="NumTotalLeads" value="@NumLeads[0]"
                            readonly>
                    </div>
                    <div class="col-md-4">
                        <label for="NumLeadsDisponible">Numero de Leads Disponibles</label>
                        <input type="text" class="form-control" id="NumLeadsDisponible" name="NumLeadsDisponible"
                            value="@NumLeads[1]" readonly>
                    </div>
                    <div class="col-md-4">
                        <label for="NumLeadsAsignados">Numero de Leads Asignados</label>
                        <input type="text" class="form-control" id="NumLeadsAsignados" name="NumLeadsAsignados"
                            value="@NumLeads[2]" readonly>
                    </div>
                }
            </div>
            <label for="BaseDestino">Destino</label>
            <select class="form-control" name="BaseDestino" id="BaseDestino" onchange="cargarBaseDisponible(this.value)">
                <option value="">Seleccione una Base de Destino</option>
                @if (destinoBases != null)
                {
                    @foreach (var destinoBase in destinoBases)
                    {
                        @if (@destinoBase != "A365_AGREGADO_MANUALMENTE" || @destinoBase != "ALFIN_AGREGADO_MANUALMENTE_2")
                        {
                            <option value="@destinoBase">@destinoBase</option>
                        }
                    }
                }
            </select>
        </div>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Vendedor</th>
                    <th>Número de clientes asignados</th>
                    <th>Asignar número de clientes</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int cont = 0;
                }
                @foreach (var vendedores in Model)
                {
                    if (vendedores.estaActivado == true)
                    {
                        <tr data-index="@cont">
                            <td>
                                <textarea class="form-control" readonly>@vendedores.NombresCompletos</textarea>
                            </td>
                            <td>
                                <input class="form-control" value="@vendedores.NumeroClientes" readonly>
                            </td>
                            <td>
                                <input name="asignacionasesor[@cont].NumClientes" type="number" class="form-control" value="0"
                                    required>
                                <input name="asignacionasesor[@cont].IdVendedor" type="text" class="form-control"
                                    value="@vendedores.IdUsuario" hidden>
                            </td>
                        </tr>
                        cont++;
                    }
                }
            </tbody>
        </table>
        <div class="form-group" id="guardarAsignacionesContainer">
            <button class="btn btn-success" type="button" onclick="EnviarDatos()">Guardar
                Asignaciones</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function EnviarDatos() {

            const asignaciones = [];

            // Recopilar datos del formulario dinámico
            document.querySelectorAll('tbody tr').forEach((row) => {
                const index = row.getAttribute('data-index');
                const numClientesInput = row.querySelector(`input[name="asignacionasesor[${index}].NumClientes"]`);
                const idVendedorInput = row.querySelector(`input[name="asignacionasesor[${index}].IdVendedor"]`);

                // Verificar que ambos inputs existen antes de usarlos
                if (numClientesInput && idVendedorInput) {
                    const numClientes = numClientesInput.value;
                    const idVendedor = idVendedorInput.value;

                    if (numClientes > 0) { // Solo agregamos si el número de clientes es mayor a 0
                        asignaciones.push({
                            NumClientes: parseInt(numClientes, 10),
                            IdVendedor: parseInt(idVendedor, 10)
                        });
                    }
                }
            });
            const selectAsesorBase = document.getElementById('BaseDestino').value;

            // Imprimir la información completa a enviar antes de hacer el AJAX
            console.log("Información completa a enviar:", {
                asignacionasesor: asignaciones,
                selectAsesorBase: selectAsesorBase,
            });

            // Enviar los datos mediante AJAX
            $.ajax({
                url: '/Asesor/AsignarClientesAAsesores',
                type: 'POST',
                data: {
                    asignacionasesor: asignaciones,
                    selectAsesorBase: selectAsesorBase,
                },
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Modificación Exitosa',
                            text: response.message,
                            icon: 'success',
                            confirmButtonText: 'Aceptar'
                        }).then(() => {
                            // Reset UI
                            document.getElementById('guardarAsignacionesContainer').style.display = 'block';
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error en la asignación',
                            text: response.message,
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Error en la Reasignación',
                        text: 'Error en la Reasignación',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                }
            });
        }
    </script>
    <script src="~/js/Asignacion/Asignacion.js" asp-append-version="true"></script>
}