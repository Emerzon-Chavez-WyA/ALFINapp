@model ALFINapp.Models.Usuario
@{
    var rol = Model?.Rol ?? "ASESOR DE CREDITOS";
    var RolUsuarioActual = ViewData["RolActual"] as int?;
    if (RolUsuarioActual == null)
    {
        RolUsuarioActual = 0; // or any default value you prefer
    }
}
<div class="label-for-sup-sec">
    <div class="row">
        <div class="col">
            <h2 class="d-inline-block"> Agregar Asesor de Creditos: </h2>
        </div>
        <div class="col-auto">
            <button type="button" class="btn-close" aria-label="Close" onclick="cerraragregarNuevoAsesorView()"
                style="filter: invert(1) brightness(2); background-color: transparent; border: none; "
                onmouseover="this.style.filter='invert(1) brightness(2.5)';"
                onmouseout="this.style.filter='invert(1) brightness(2)';">
            </button>
        </div>
    </div>
</div>


<div class="row">
    <div class="alert alert-info">
        Llene todos los campos para poder agregar un nuevo usuario.
    </div>
    <div class="col-md-6">
        <div class="mb-3">
            <label for="dni" class="form-label">DNI</label>
            <input type="text" class="form-control" id="dni" name="dni" required oninput="validarDNISupervisor()">
            <div class="invalid-feedback" id="dni-error">
                El DNI debe tener 8 dígitos y solo números.
            </div>
        </div>
        <div class="mb-3">
            <label for="departamento" class="form-label">Departamento</label>
            <select class="form-control" id="departamento" name="departamento" required>
                <option value="">Seleccione un departamento</option>
                <option value="Amazonas">Amazonas</option>
                <option value="Áncash">Áncash</option>
                <option value="Apurímac">Apurímac</option>
                <option value="Arequipa">Arequipa</option>
                <option value="Ayacucho">Ayacucho</option>
                <option value="Cajamarca">Cajamarca</option>
                <option value="Callao">Callao</option>
                <option value="Cusco">Cusco</option>
                <option value="Huancavelica">Huancavelica</option>
                <option value="Huánuco">Huánuco</option>
                <option value="Ica">Ica</option>
                <option value="Junín">Junín</option>
                <option value="La Libertad">La Libertad</option>
                <option value="Lambayeque">Lambayeque</option>
                <option value="Lima">Lima</option>
                <option value="Loreto">Loreto</option>
                <option value="Madre de Dios">Madre de Dios</option>
                <option value="Moquegua">Moquegua</option>
                <option value="Pasco">Pasco</option>
                <option value="Piura">Piura</option>
                <option value="Puno">Puno</option>
                <option value="San Martín">San Martín</option>
                <option value="Tacna">Tacna</option>
                <option value="Tumbes">Tumbes</option>
                <option value="Ucayali">Ucayali</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="provincia" class="form-label">Provincia</label>
            <input type="text" class="form-control" id="provincia" name="provincia" required>
        </div>
        <div class="mb-3">
            <label for="distrito" class="form-label">Distrito</label>
            <input type="text" class="form-control" id="distrito" name="distrito" required>
        </div>
        <div class="mb-3">
            <label for="region" class="form-label">Region</label>
            <input type="text" class="form-control" id="region" name="region" required
                oninput="validarLetras('region')">
            <div class="invalid-feedback" id="region-error">
                El campo Region solo puede tener letras.
            </div>
        </div>
        @if (RolUsuarioActual == 4 || RolUsuarioActual == 1)
        {
            <div class="mb-3">
                <label for="rol" class="form-label">Rol</label>
                <select class="form-control" id="rol" name="rol" required>
                    <option value="2">SUPERVISOR</option>
                    <option value="3">ASESOR DE CREDITOS</option>
                </select>
            </div>
        }
        else
        {
            <div class="mb-3">
                <label for="rol" class="form-label">Rol</label>
                <input type="text" class="form-control" id="rol" name="rol" required readonly value="ASESOR DE CREDITOS">
            </div>
        }
    </div>

    <div class="col-md-6">
        <div class="mb-3">
            <label for="apellido_paterno" class="form-label">Apellido Paterno</label>
            <input type="text" class="form-control" id="apellido_paterno" name="apellido_paterno" required
                oninput="validarLetras('apellido_paterno')">
            <div class="invalid-feedback" id="apellido_paterno-error">
                El campo Apellido Paterno solo puede tener letras.
            </div>
        </div>
        <div class="mb-3">
            <label for="apellido_materno" class="form-label">Apellido Materno</label>
            <input type="text" class="form-control" id="apellido_materno" name="apellido_materno" required
                oninput="validarLetras('apellido_materno')">
            <div class="invalid-feedback" id="apellido_materno-error">
                El campo Apellido Materno solo puede tener letras.
            </div>
        </div>
        <div class="mb-3">
            <label for="nombres" class="form-label">Nombres Completos</label>
            <input type="text" class="form-control" id="nombres" name="nombres" required
                oninput="validarLetras('nombres')">
            <div class="invalid-feedback" id="nombres-error">
                El campo Nombres Completos solo puede tener letras.
            </div>
        </div>
        <div class="mb-3">
            <label for="telefono" class="form-label">Telefono</label>
            <input type="text" class="form-control" id="telefono" name="telefono" required oninput="validarTelefono()">
            <div class="invalid-feedback" id="telefono-error">
                El telefono solo puede tener números.
            </div>
        </div>
    </div>
</div>
<div class="spacing"> </div>

<div class="row">
    <div class="col-md-12">
        <a href="javascript:void(0)" class="btn btn-success" onclick="guardarNuevoAsesor()">Agregar</a>
    </div>
</div>


<script>
    /// <summary>
    /// This function is responsible for validating and saving a new asesor de creditos.
    /// It performs client-side validation for the input fields and sends an AJAX request to the server to save the new asesor.
    /// </summary>
    function guardarNuevoAsesor() {
        // Define an array of input field IDs
        var inputs = ['dni', 'departamento', 'provincia', 'distrito', 'region', 'rol', 'apellido_paterno', 'apellido_materno', 'nombres', 'telefono'];

        // Get the DNI value and perform validation
        var dni = document.getElementById('dni').value.trim();
        if (!/^[0-9]{10}$/.test(dni)) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'El DNI debe tener 10 dígitos y solo números.'
            });
            return;
        }

        // Define an array of field IDs that should only contain letters
        var soloLetrasCampos = ['region', 'apellido_paterno', 'apellido_materno', 'nombres'];
        var valid = true;
        // Perform validation for each field in the array
        soloLetrasCampos.forEach(function (campo) {
            var valor = document.getElementById(campo).value.trim();

            if (!/^[a-zA-Z\s]+$/.test(valor)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'El campo "' + campo + '" solo puede tener letras.'
                });
                valid = false;
                return;
            }
        });

        // If any field fails validation, log an error message and return
        if (!valid) {
            console.log('Existen errores en los campos.');
            return;
        }

        // Get the telefono value and perform validation
        var telefono = document.getElementById('telefono').value.trim();
        if (!/^[0-9]{9}$/.test(telefono)) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'El campo Telefono solo puede tener valores Numericos y No puede estar Vacio'
            });
            return;
        }

        // Prepare the data to be sent in the AJAX request
        var dataToSend = {
            Dni: dni,
            Departamento: document.getElementById('departamento').value.trim(),
            Provincia: document.getElementById('provincia').value.trim(),
            Distrito: document.getElementById('distrito').value.trim(),
            REGION: document.getElementById('region').value.trim(),
            NombresCompletos: document.getElementById('nombres').value.trim()
                + ' ' + document.getElementById('apellido_paterno').value.trim()
                + ' ' + document.getElementById('apellido_materno').value.trim(),
            Telefono: telefono,
            IdRol: document.getElementById('rol').value.trim()
        };

        // Send an AJAX request to the server
        $.ajax({
            url: "/Asesor/AgregarNuevoAsesor",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(dataToSend),
            success: function (response) {
                // Check the response status and display a success or error message accordingly
                if (response.success === true) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Informacion del asesor',
                        text: response.message
                    });
                }
                else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message
                    });
                }
            },
            error: function () {
                // Display an error message if the AJAX request fails
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Hubo un error al agregar el usuario.'
                });
            }
        });
    }


    /// <summary>
    /// This function is responsible for validating the DNI input field in the "Agregar Nuevo Asesor" view.
    /// It checks if the DNI value is a 8-digit number and only contains numeric characters.
    /// If the validation fails, it adds the 'is-invalid' class to the input field and displays an error message.
    /// If the validation passes, it removes the 'is-invalid' class and hides the error message.
    /// </summary>
    /// <param name="dni">The value entered in the DNI input field.</param>
    /// <returns>No return value.</returns>
    function validarDNISupervisor() {
        var dni = document.getElementById('dni').value;
        var dniInput = document.getElementById('dni');
        var errorElement = document.getElementById('dni-error');
        var regex = /^[0-9]{8}$/;

        if (!regex.test(dni)) {
            dniInput.classList.add('is-invalid'); // Aplica el estilo de error de Bootstrap
            errorElement.style.display = 'block'; // Muestra el mensaje de error
        } else {
            dniInput.classList.remove('is-invalid'); // Remueve el estilo de error de Bootstrap
            errorElement.style.display = 'none'; // Oculta el mensaje de error
        }
    }


    /// <summary>
    /// This function is responsible for validating the telefono input field in the "Agregar Nuevo Asesor" view.
    /// It checks if the telefono value only contains numeric characters.
    /// If the validation fails, it adds the 'is-invalid' class to the input field and displays an error message.
    /// If the validation passes, it removes the 'is-invalid' class and hides the error message.
    /// </summary>
    /// <param name="telefono">The value entered in the telefono input field.</param>
    /// <returns>No return value.</returns>
    function validarTelefono() {
        var telefono = document.getElementById('telefono').value;
        var telefonoInput = document.getElementById('telefono');
        var errorElement = document.getElementById('telefono-error');
        var regex = /^[0-9]+$/;

        if (!regex.test(telefono)) {
            telefonoInput.classList.add('is-invalid');
            errorElement.style.display = 'block';
        } else {
            telefonoInput.classList.remove('is-invalid');
            errorElement.style.display = 'none';
        }
    }

    /// <summary>
    /// This function is responsible for validating input fields that should only contain letters.
    /// It checks if the input value matches the regular expression /^[a-zA-Z\s]+$/ and applies appropriate styles and error messages.
    /// </summary>
    /// <param name="campo">The ID of the input field to be validated.</param>
    /// <returns>No return value.</returns>
    function validarLetras(campo) {
        var campol = document.getElementById(campo).value;
        var campolInput = document.getElementById(campo);
        var errorElement = document.getElementById(campo + '-error');
        var regex = /^[a-zA-Z\s]+$/;

        if (!regex.test(campol)) {
            campolInput.classList.add('is-invalid'); // Apply Bootstrap's 'is-invalid' class to the input field
            errorElement.style.display = 'block'; // Display the error message
        } else {
            campolInput.classList.remove('is-invalid'); // Remove Bootstrap's 'is-invalid' class from the input field
            errorElement.style.display = 'none'; // Hide the error message
        }
    }

</script>